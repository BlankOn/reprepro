From 4c24ff68728047c7ebed3506e782a1c592966a92 Mon Sep 17 00:00:00 2001
From: "Bernhard R. Link" <brlink@debian.org>
Date: Thu, 22 Dec 2016 15:50:34 +0100
Subject: add unreferencesnapshot and removereference commands

---
 ChangeLog                      |  3 +++
 docs/reprepro.1                | 11 ++++++++++-
 docs/reprepro.bash_completion  |  4 +++-
 docs/reprepro.zsh_completion   | 12 +++++++++++-
 main.c                         | 24 ++++++++++++++++++++++++
 tests/snapshotcopyrestore.test |  2 +-
 6 files changed, 52 insertions(+), 4 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 7f95714..1d7d00b 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,6 @@
+2016-12-22  Bernhard R. Link <brlink@debian.org>
+	* add unreferencesnapshot and removereference commands
+
 2016-12-21  Bernhard R. Link <brlink@debian.org>
 	* fix behaviour of (Deb|Dsc)Indices without a Release file
 	  (if no Release filename was given the default was used
diff --git a/docs/reprepro.1 b/docs/reprepro.1
index f8e3045..e2cd2d1 100644
--- a/docs/reprepro.1
+++ b/docs/reprepro.1
@@ -943,7 +943,7 @@ Note that there is currently no automated way to remove that snapshot
 again (not even clearvanished will unlock the referenced files after the
 distribution itself vanished).
 You will have to remove the directory yourself and tell reprepro
-to \fB_removereferences s=\fP\fIcodename\fP\fB=\fP\fIdirectoryname\fP before
+to \fBunreferencesnapshot \fP\fIcodename\fP\fB \fP\fIdirectoryname\fP before
 \fBdeleteunreferenced\fP will delete the files from the pool locked by this.
 
 To access such a snapshot with apt, add something like the following to
@@ -951,6 +951,12 @@ your sources.list file:
 .br
 \fBdeb method://as/without/snapshot \fIcodename\fB/snapshots/\fIname\fB main\fR
 .TP
+.B unreferencesnapshot " " \fIcodename\fP " " \fIdirectoryname\fP
+Remove all references generated by an \fBgenshapshot\fP with the
+same arguments.
+This allows the next \fBdeleteunferenced\fP call to delete those files.
+(The indicies in \fBdists/\fP for the snapshot are not removed.)
+.TP
 .BR rerunnotifiers " [ " \fIcodenames\fP " ]"
 Run all external scripts specified in the \fBLog:\fP options of the
 specified distributions.
@@ -1097,6 +1103,9 @@ Manually mark one or more \fIfilekeys\fP to be needed by \fIidentifier\fP.
 If no command line arguments are given,
 stdin is read and every line treated as one filekey.
 .TP
+.BI "_removereference " identifier " " filekey
+Manually remove the given mark that the file is needed by this identifier.
+.TP
 .BI "_removereferences " identifier
 Remove all references what is needed by
 .I identifier.
diff --git a/docs/reprepro.bash_completion b/docs/reprepro.bash_completion
index e0d4637..310d2b5 100644
--- a/docs/reprepro.bash_completion
+++ b/docs/reprepro.bash_completion
@@ -300,6 +300,7 @@ _reprepro()
 			flood\
 			generatefilelists\
 			gensnapshot\
+			unreferencesnapshot\
 			include\
 			includedeb\
 			includedsc\
@@ -353,6 +354,7 @@ _reprepro()
 		       	_listconfidentifiers\
 		       	_listdbidentifiers\
 			_listmd5sums\
+			_removereference\
 			_removereferences\
 		       	_versioncompare'
 
@@ -522,7 +524,7 @@ _reprepro()
 			fi
 			return 0
 			;;
-		gensnapshot)
+		gensnapshot|unreferencesnapshot)
 			# first argument is a codename
 			if [[ $i -eq $COMP_CWORD ]] ; then
 				parse_config
diff --git a/docs/reprepro.zsh_completion b/docs/reprepro.zsh_completion
index e24c97e..3e04157 100644
--- a/docs/reprepro.zsh_completion
+++ b/docs/reprepro.zsh_completion
@@ -254,6 +254,7 @@ commands=(
 	tidytracks:"look for files referened by tracks but no longer needed"
 	translatefilelists:"translate pre-3.0.0 contents.cache.db into new format"
 	translatelegacychecksums:"get rid of obsolete files.db"
+	unreferencesnapshot:"no longer mark files used by an snapshot"
 	unusedsources:"list source packages with no binary packages"
 	update:"update from external source"
    	)
@@ -275,6 +276,7 @@ hiddencommands=(
 	_listconfidentifiers:"list parts of the repository in the configuration"
 	_listdbidentifiers:"list parts of the repository in the database"
 	_listmd5sums:"print a list of filekeys and their md5 hashes"
+	_removereference:"manuall remove a reference"
 	_removereferences:"remove all references by an identifer"
     	)
 
@@ -393,6 +395,13 @@ case "$state" in
 			_reprepro_identifiers
 		fi
 		;;
+	  (_removereference)
+		if [[ "$state" = "first argument" ]] ; then
+			_reprepro_identifiers
+		elif [[ "$state" = "second argument" ]] ; then
+			_reprepro_filekeys
+		fi
+		;;
 	 (list|listfilter|listmatched)
 		if [[ "$state" = "first argument" ]] ; then
 			_reprepro_codenames
@@ -418,7 +427,8 @@ case "$state" in
 			_reprepro_codenames
 		fi
 		;;
-	 (gensnapshot)
+	 (gensnapshot|unreferencesnapshot)
+		# TODO: for unreferencesnapshot get instead a list of existing ones
 		if [[ "$state" = "first argument" ]] ; then
 			_reprepro_codenames
 		elif [[ "$state" = "second argument" ]] ; then
diff --git a/main.c b/main.c
index 8e2a55f..70433d3 100644
--- a/main.c
+++ b/main.c
@@ -525,6 +525,10 @@ ACTION_R(n, n, n, y, removereferences) {
 	return references_remove(argv[1]);
 }
 
+ACTION_R(n, n, n, y, removereference) {
+	assert (argc == 3);
+	return references_decrement(argv[2], argv[1]);
+}
 
 ACTION_R(n, n, n, n, dumpreferences) {
 	return references_dump();
@@ -3640,6 +3644,22 @@ ACTION_R(n, n, y, y, gensnapshot) {
 	return distribution_snapshot(distribution, argv[2]);
 }
 
+ACTION_R(n, n, n, y, unreferencesnapshot) {
+	retvalue result;
+	char *id;
+
+	assert (argc == 3);
+
+	id = mprintf("s=%s=%s", argv[1], argv[2]);
+	if (FAILEDTOALLOC(id))
+		return RET_ERROR_OOM;
+
+	result = references_remove(id);
+
+	free(id);
+
+	return result;
+}
 
 /***********************rerunnotifiers********************************/
 static retvalue rerunnotifiersintarget(struct target *target, UNUSED(void *dummy)) {
@@ -3869,6 +3889,8 @@ static const struct action {
 		1, 1, "_dumpcontents <identifier>"},
 	{"_removereferences", 	A__R(removereferences),
 		1, 1, "_removereferences <identifier>"},
+	{"_removereference", 	A__R(removereference),
+		2, 2, "_removereferences <identifier>"},
 	{"_addreference", 	A__R(addreference),
 		2, 2, "_addreference <reference> <referee>"},
 	{"_addreferences", 	A__R(addreferences),
@@ -3991,6 +4013,8 @@ static const struct action {
 		1, 2, "processincoming <rule-name> [<.changes file>]"},
 	{"gensnapshot",		A_R(gensnapshot),
 		2, 2, "gensnapshot <distribution> <date or other name>"},
+	{"unreferencesnapshot",	A__R(unreferencesnapshot),
+		2, 2, "gensnapshot <distribution> <name of snapshot>"},
 	{"rerunnotifiers",	A_Bact(rerunnotifiers),
 		0, -1, "rerunnotifiers [<distributions>]"},
 	{"cleanlists",		A_L(cleanlists),
diff --git a/tests/snapshotcopyrestore.test b/tests/snapshotcopyrestore.test
index e3869b7..35ddd76 100644
--- a/tests/snapshotcopyrestore.test
+++ b/tests/snapshotcopyrestore.test
@@ -562,7 +562,7 @@ $(opa 'foo' x 'B' 'dog' 'source' 'dsc')
 -v1*= generating dog/Contents-abacus...
 EOF
 
-testrun empty -b . _removereferences s=B=now
+testrun empty -b . unreferencesnapshot B now
 
 testrun empty -b . dumpunreferenced
 
